/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    bindings = <&to>, <&kp>;
};

/ {
    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <2000>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | GRAVE  |   1    |   2    |   3    |   4    |   5    |                                      |   6    |   7    |   8    |   9    |   0    |  DEL   |
            // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
            // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   '    |
            // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |  LBKT  |                    |  RBKT  |   N    |   M    |   ,    |   .    |   /    |  RET   |
            // | ADJUST |  ESC   |  ALT   |  LGUI  | EISUU  | LOWER  | SPACE  |                    |  SPACE | RAISE  |  KANA  |  LEFT  |  DOWN  |  UP    |  RIGHT |

            bindings = <
&kp GRAVE       &kp N1  &kp N2    &kp N3    &kp N4  &kp N5   &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB         &kp Q   &kp W     &kp E     &kp R   &kp T    &kp Y   &kp U   &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_SHIFT  &kp A   &kp S     &kp D     &kp F   &kp G    &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL       &kp Z   &kp X     &kp C     &kp V   &kp B    &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
&kp SPACE       &mo 2   &kp LGUI  &kp RALT  &mo 0   &kp RET
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp LC(C)      &kp N     &kp LC(V)       &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp C_AC_REDO  &kp C_AC_COPY  &kp UP    &kp C_AC_PASTE  &kp C_AC_CUT  &kp C_AC_UNDO
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp LEFT       &kp DOWN  &kp RIGHT       &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp HOME       &kp END   &kp N           &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans                                   &trans        &trans
            >;
        };

        mouse_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | GRAVE  |   1    |   2    |   3    |   4    |   5    |                                      |   6    |   7    |   8    |   9    |   0    |  DEL   |
            // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
            // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   '    |
            // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |  LBKT  |                    |  RBKT  |   N    |   M    |   ,    |   .    |   /    |  RET   |
            // | ADJUST |  ESC   |  ALT   |  LGUI  | EISUU  | LOWER  | SPACE  |                    |  SPACE | RAISE  |  KANA  |  LEFT  |  DOWN  |  UP    |  RIGHT |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(R)  &kp LC(P)  &kp LC(C)  &kp LC(X)  &kp LC(Y)  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &mkp MB4   &mkp MB5   &trans
&trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans  &trans  &trans            &trans  &trans      &rgb_ug RGB_TOG    &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans        &trans
&trans  &trans  &trans  &trans            &trans  &trans      &rgb_ug RGB_EFF    &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans        &trans
&trans  &trans  &trans  &trans            &trans  &trans      &ext_power EP_TOG  &kp C_PREVIOUS   &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT    &trans
&trans  &trans  &trans  &trans            &trans  &trans      &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &trans  &trans  &kp C_PLAY_PAUSE  &trans  &kp C_MUTE  &trans             &trans                                             &trans        &trans
            >;
        };

        NUM {
            bindings = <
&trans   &trans     &trans     &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans   &kp LBKT   &kp N7     &kp N8  &kp N9  &kp RBKT   &trans  &trans  &trans  &trans  &trans  &trans
&trans   &kp SEMI   &kp N4     &kp N5  &kp N6  &kp EQUAL  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &kp GRAVE  &kp N1     &kp N2  &kp N3  &kp FSLH   &trans  &trans  &trans  &trans  &trans  &trans
&kp DOT  &kp N0     &kp MINUS  &trans  &trans  &trans     &trans  &trans                  &trans  &trans
            >;
        };

        SYM {
            bindings = <
&trans        &trans         &trans         &trans         &trans         &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans        &kp LS(LBRC)   &kp LS(AMPS)   &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &kp LS(COLON)  &kp LS(DLLR)   &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(PLUS)  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &kp LS(TILDE)  &kp LS(EXCL)   &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)  &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(LPAR)  &kp LS(RPAR)   &kp LS(UNDER)  &trans         &trans         &trans        &trans  &trans                  &trans  &trans
            >;
        };

        FUNC {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp PRINTSCREEN  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans  &trans  &trans  &trans           &trans  &trans                  &trans  &trans
            >;
        };
    };
};

//right hand trackball override

&trackball_central_listener {
    input-processors = <&zip_temp_layer 1 500>;//activate layer 3 within 500ms of the trackball moving
};

//left hand trackball overrides

&trackball_peripheral_listener {
    input-processors =
        <&zip_xy_scaler 1 20>,
        //multiply sensitivity by 1, divide by 3 (make it slower for scrolling),
        <&zip_xy_to_scroll_mapper>;
//make this trackball output scrolling events by default instead of cursor movement
};
